name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_USER: skateuser
          POSTGRES_PASSWORD: skatepassword
          POSTGRES_DB: skatespot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend_py/requirements.txt

      - name: Install dependencies
        run: |
          cd backend_py
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install test dependencies
          pip install pytest httpx pytest-asyncio aiosqlite

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://skateuser:skatepassword@localhost:5432/skatespot_test
          JWT_SECRET_KEY: test-secret-key-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret
        run: |
          cd backend_py
          python -m pytest tests/ -v --tb=short

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend_py
          file: ./backend_py/Dockerfile
          push: false
          tags: skatespot-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: false
          tags: skatespot-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests with Docker Compose
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create env file
        run: |
          mkdir -p infra/env
          cat > infra/env/.env.local << EOF
          DATABASE_URL=postgresql://skateuser:skatepassword@postgres:5432/skatespot
          JWT_SECRET_KEY=test-secret-key-for-ci
          GOOGLE_CLIENT_ID=test-client-id
          GOOGLE_CLIENT_SECRET=test-client-secret
          FRONTEND_URL=http://localhost:5173
          AWS_ACCESS_KEY_ID=test-key
          AWS_SECRET_ACCESS_KEY=test-secret
          AWS_REGION=us-east-1
          S3_BUCKET_NAME=test-bucket
          EOF

      - name: Start services
        run: |
          cd infra
          docker-compose up -d
          # Wait for services to be ready
          sleep 30

      - name: Check service health
        run: |
          cd infra
          docker-compose ps
          docker-compose logs postgres
          docker-compose logs backend
          
      - name: Run backend tests in container
        run: |
          cd infra
          # Install test dependencies in the running container
          docker-compose exec -T backend pip install pytest httpx pytest-asyncio aiosqlite
          # Run tests
          docker-compose exec -T backend python -m pytest /app/tests/ -v

      - name: Stop services
        if: always()
        run: |
          cd infra
          docker-compose down -v

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.12.1

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Run format check
        run: |
          cd frontend
          pnpm run format:check

  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Run Black formatter check
        run: |
          cd backend_py
          black --check app/ tests/

      - name: Run Flake8 linter
        run: |
          cd backend_py
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run isort import checker
        run: |
          cd backend_py
          isort --check-only app/ tests/

  notify-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [test-backend, docker-build, integration-tests, frontend-lint, backend-lint]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ CI Pipeline failed"
            exit 1
          else
            echo "✅ CI Pipeline passed successfully"
          fi